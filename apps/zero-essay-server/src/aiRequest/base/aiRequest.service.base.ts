/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AiRequest as PrismaAiRequest } from "@prisma/client";

export class AiRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiRequest.count(args);
  }

  async aiRequests(
    args: Prisma.AiRequestFindManyArgs
  ): Promise<PrismaAiRequest[]> {
    return this.prisma.aiRequest.findMany(args);
  }
  async aiRequest(
    args: Prisma.AiRequestFindUniqueArgs
  ): Promise<PrismaAiRequest | null> {
    return this.prisma.aiRequest.findUnique(args);
  }
  async createAiRequest(
    args: Prisma.AiRequestCreateArgs
  ): Promise<PrismaAiRequest> {
    return this.prisma.aiRequest.create(args);
  }
  async updateAiRequest(
    args: Prisma.AiRequestUpdateArgs
  ): Promise<PrismaAiRequest> {
    return this.prisma.aiRequest.update(args);
  }
  async deleteAiRequest(
    args: Prisma.AiRequestDeleteArgs
  ): Promise<PrismaAiRequest> {
    return this.prisma.aiRequest.delete(args);
  }
}
