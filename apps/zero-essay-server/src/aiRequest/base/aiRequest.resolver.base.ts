/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AiRequest } from "./AiRequest";
import { AiRequestCountArgs } from "./AiRequestCountArgs";
import { AiRequestFindManyArgs } from "./AiRequestFindManyArgs";
import { AiRequestFindUniqueArgs } from "./AiRequestFindUniqueArgs";
import { DeleteAiRequestArgs } from "./DeleteAiRequestArgs";
import { AiRequestService } from "../aiRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AiRequest)
export class AiRequestResolverBase {
  constructor(
    protected readonly service: AiRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AiRequest",
    action: "read",
    possession: "any",
  })
  async _aiRequestsMeta(
    @graphql.Args() args: AiRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AiRequest])
  @nestAccessControl.UseRoles({
    resource: "AiRequest",
    action: "read",
    possession: "any",
  })
  async aiRequests(
    @graphql.Args() args: AiRequestFindManyArgs
  ): Promise<AiRequest[]> {
    return this.service.aiRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AiRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AiRequest",
    action: "read",
    possession: "own",
  })
  async aiRequest(
    @graphql.Args() args: AiRequestFindUniqueArgs
  ): Promise<AiRequest | null> {
    const result = await this.service.aiRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiRequest)
  @nestAccessControl.UseRoles({
    resource: "AiRequest",
    action: "delete",
    possession: "any",
  })
  async deleteAiRequest(
    @graphql.Args() args: DeleteAiRequestArgs
  ): Promise<AiRequest | null> {
    try {
      return await this.service.deleteAiRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
